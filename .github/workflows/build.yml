on:
  push:
  pull_request:

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            bundles: [dmg, updater]
          - platform: macos-latest
            target: x86_64-apple-darwin
            bundles: [dmg, updater]
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            triple: aarch64-linux-gnu
            arch: arm64
            bundles: [deb]
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            triple: x86_64-linux-gnu
            arch: amd64
            bundles: [deb, appimage, updater]
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: [nsis, updater]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: (Ubuntu) Set up APT sources
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          cat <<EOF | sudo tee /etc/apt/sources.list
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security main restricted
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security universe
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security multiverse
          EOF

      - name: (Ubuntu) Set up APT sources for ${{ matrix.arch }}
        if: matrix.platform == 'ubuntu-22.04' && matrix.arch != 'amd64'
        run: |
          cat <<EOF | sudo tee --append /etc/apt/sources.list
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy universe
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates universe
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy multiverse
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates multiverse
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-security universe
          deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-security multiverse
          EOF

      - name: (Ubuntu) Install native dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libappindicator3-dev:${{ matrix.arch }} \
            librsvg2-dev:${{ matrix.arch }} \
            libssl-dev:${{ matrix.arch }} \
            libudev-dev:${{ matrix.arch }} \
            libwebkit2gtk-4.1-dev:${{ matrix.arch }} \
            patchelf
          echo "PKG_CONFIG_SYSROOT_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/lib/${{ matrix.triple }}/pkgconfig" >> $GITHUB_ENV

      - name: (Ubuntu) Set up cross-compiler for ${{ matrix.arch }}
        if: matrix.platform == 'ubuntu-22.04' && matrix.triple != 'x86_64-linux-gnu'
        run: |
          sudo apt-get install --no-install-recommends -y gcc-${{ matrix.triple }}
          mkdir -p .cargo
          cat <<EOF | tee .cargo/config.toml
          [target.${{ matrix.target }}]
          linker = "${{ matrix.triple }}-gcc"
          EOF

      - name: Install frontend dependencies
        run: npm ci

      - name: Build
        uses: tauri-apps/tauri-action@v0
        id: build
        with:
          args: >
            --target ${{ matrix.target }}
            --bundles ${{ join(matrix.bundles, ',') }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: '${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}'
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ''

      - name: Collect artifacts (Bash)
        if: matrix.platform != 'windows-latest'
        run: |
          mkdir -p artifacts
          for artifact in ${{ join(fromJson(steps.build.outputs.artifactPaths), ' ') }}; do
            mv $artifact artifacts/
          done

      - name: Collect artifacts (PowerShell)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir artifacts
          $artifactPaths = ConvertFrom-Json '${{ steps.build.outputs.artifactPaths }}'
          foreach ($artifact in $artifactPaths) {
            Move-Item $artifact artifacts/
          }

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cskburn-desktop-${{ matrix.target }}
          path: artifacts/
